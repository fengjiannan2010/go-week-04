// Code generated by goctl. DO NOT EDIT!
// Source: odrive.proto

package odriveclient

import (
	"context"
	"oburn/rpc/client/odrive"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	DiscInfoResponse                 = odrive.DiscInfoResponse
	FormatDiscResponse               = odrive.FormatDiscResponse
	SystemRebootResponse             = odrive.SystemRebootResponse
	GetObjectResponse                = odrive.GetObjectResponse
	BlockInfo                        = odrive.BlockInfo
	GetSpeedConfRequest              = odrive.GetSpeedConfRequest
	FixDiscStatusResponse            = odrive.FixDiscStatusResponse
	GetDriveTrayStatusResponse       = odrive.GetDriveTrayStatusResponse
	VerifyObjectRequest              = odrive.VerifyObjectRequest
	PutObjectRequest                 = odrive.PutObjectRequest
	ObjectExistsRequest              = odrive.ObjectExistsRequest
	StatObjectResponse               = odrive.StatObjectResponse
	SetBurnConfigResponse            = odrive.SetBurnConfigResponse
	UnLoadUdfDiscResponse            = odrive.UnLoadUdfDiscResponse
	DriveInfoResponse                = odrive.DriveInfoResponse
	DriveInfo                        = odrive.DriveInfo
	DriveRebootResponse              = odrive.DriveRebootResponse
	ObjectInfo                       = odrive.ObjectInfo
	InitDiscResponse                 = odrive.InitDiscResponse
	OpenDriveTrayRequest             = odrive.OpenDriveTrayRequest
	OpenDriveTrayResponse            = odrive.OpenDriveTrayResponse
	SimulateDriveTrayChangesResponse = odrive.SimulateDriveTrayChangesResponse
	ListObjectsRequest               = odrive.ListObjectsRequest
	CompleteDiscResponse             = odrive.CompleteDiscResponse
	FirmwareVersion                  = odrive.FirmwareVersion
	RenameObjectRequest              = odrive.RenameObjectRequest
	GetBlockInfoRequest              = odrive.GetBlockInfoRequest
	LoadDiscResponse                 = odrive.LoadDiscResponse
	DriveInitResponse                = odrive.DriveInitResponse
	TestUnityReadyResponse           = odrive.TestUnityReadyResponse
	SetTimeRequest                   = odrive.SetTimeRequest
	CloseDriveTrayResponse           = odrive.CloseDriveTrayResponse
	GetObjectRequest                 = odrive.GetObjectRequest
	EmptyRequest                     = odrive.EmptyRequest
	SetSpeedConfRequest              = odrive.SetSpeedConfRequest
	UnLoadDiscResponse               = odrive.UnLoadDiscResponse
	ResetResponse                    = odrive.ResetResponse
	DrivePowerOffResponse            = odrive.DrivePowerOffResponse
	ListObjectBlockRequest           = odrive.ListObjectBlockRequest
	SetBurnModeResponse              = odrive.SetBurnModeResponse
	GetDiscMountPointResponse        = odrive.GetDiscMountPointResponse
	GetDrivePowerStatusResponse      = odrive.GetDrivePowerStatusResponse
	SystemInfoResponse               = odrive.SystemInfoResponse
	RenameObjectResponse             = odrive.RenameObjectResponse
	Message                          = odrive.Message
	GetBurnConfigResponse            = odrive.GetBurnConfigResponse
	VerifyObjectStatusResponse       = odrive.VerifyObjectStatusResponse
	ListObjectsResponse              = odrive.ListObjectsResponse
	VerifyObjectStatusRequest        = odrive.VerifyObjectStatusRequest
	PutObjectResponse                = odrive.PutObjectResponse
	SetSpeedConfResponse             = odrive.SetSpeedConfResponse
	GetSpeedConfResponse             = odrive.GetSpeedConfResponse
	GetCacheInfoResponse             = odrive.GetCacheInfoResponse
	RemoveObjectResponse             = odrive.RemoveObjectResponse
	RemoveBucketResponse             = odrive.RemoveBucketResponse
	GetBurnModeResponse              = odrive.GetBurnModeResponse
	RecoverDiscDbResponse            = odrive.RecoverDiscDbResponse
	StatObjectRequest                = odrive.StatObjectRequest
	MakeBucketResponse               = odrive.MakeBucketResponse
	SetBurnModeResquest              = odrive.SetBurnModeResquest
	SetTimeResponse                  = odrive.SetTimeResponse
	SystemPoweroffResponse           = odrive.SystemPoweroffResponse
	StopResponse                     = odrive.StopResponse
	GetBlockInfoResponse             = odrive.GetBlockInfoResponse
	DiscFsInfo                       = odrive.DiscFsInfo
	SetBurnConfigRequest             = odrive.SetBurnConfigRequest
	LoadDiscRequest                  = odrive.LoadDiscRequest
	DrivePowerOnResponse             = odrive.DrivePowerOnResponse
	MakeBucketRequest                = odrive.MakeBucketRequest
	MediaInfo                        = odrive.MediaInfo
	RemoveObjectRequest              = odrive.RemoveObjectRequest
	ObjectExistsResponse             = odrive.ObjectExistsResponse
	RemoveBucketRequest              = odrive.RemoveBucketRequest
	ListObjectBlockResponse          = odrive.ListObjectBlockResponse
	VerifyObjectResponse             = odrive.VerifyObjectResponse

	Odrive interface {
		Stop(ctx context.Context, in *EmptyRequest) (*StopResponse, error)
		GetDiscInfo(ctx context.Context, in *EmptyRequest) (*DiscInfoResponse, error)
		CompleteDisc(ctx context.Context, in *EmptyRequest) (*CompleteDiscResponse, error)
		FormatDisc(ctx context.Context, in *EmptyRequest) (*FormatDiscResponse, error)
		SetBurnSpeedConf(ctx context.Context, in *SetSpeedConfRequest) (*SetSpeedConfResponse, error)
		GetBurnSpeedConf(ctx context.Context, in *GetSpeedConfRequest) (*GetSpeedConfResponse, error)
		SetBurnConfig(ctx context.Context, in *SetBurnConfigRequest) (*SetBurnConfigResponse, error)
		GetBurnConfig(ctx context.Context, in *EmptyRequest) (*GetBurnConfigResponse, error)
		SetBurnMode(ctx context.Context, in *SetBurnModeResquest) (*SetBurnModeResponse, error)
		GetBurnMode(ctx context.Context, in *EmptyRequest) (*GetBurnModeResponse, error)
		InitDisc(ctx context.Context, in *EmptyRequest) (*InitDiscResponse, error)
		LoadDisc(ctx context.Context, in *LoadDiscRequest) (*LoadDiscResponse, error)
		UnLoadDisc(ctx context.Context, in *EmptyRequest) (*UnLoadDiscResponse, error)
		UnLoadUdfDisc(ctx context.Context, in *EmptyRequest) (*UnLoadUdfDiscResponse, error)
		GetDiscMountPoint(ctx context.Context, in *EmptyRequest) (*GetDiscMountPointResponse, error)
		RecoverDiscDb(ctx context.Context, in *EmptyRequest) (*RecoverDiscDbResponse, error)
		FixDiscStatus(ctx context.Context, in *EmptyRequest) (*FixDiscStatusResponse, error)
		// ################################################################################
		GetCacheInfo(ctx context.Context, in *EmptyRequest) (*GetCacheInfoResponse, error)
		Reset(ctx context.Context, in *EmptyRequest) (*ResetResponse, error)
		DriveInit(ctx context.Context, in *EmptyRequest) (*DriveInitResponse, error)
		GetDriveInfo(ctx context.Context, in *EmptyRequest) (*DriveInfoResponse, error)
		TestUnityReady(ctx context.Context, in *EmptyRequest) (*TestUnityReadyResponse, error)
		DriveReboot(ctx context.Context, in *EmptyRequest) (*DriveRebootResponse, error)
		DrivePowerOn(ctx context.Context, in *EmptyRequest) (*DrivePowerOnResponse, error)
		DrivePowerOff(ctx context.Context, in *EmptyRequest) (*DrivePowerOffResponse, error)
		GetDrivePowerStatus(ctx context.Context, in *EmptyRequest) (*GetDrivePowerStatusResponse, error)
		OpenDriveTray(ctx context.Context, in *OpenDriveTrayRequest) (*OpenDriveTrayResponse, error)
		CloseDriveTray(ctx context.Context, in *EmptyRequest) (*CloseDriveTrayResponse, error)
		GetDriveTrayStatus(ctx context.Context, in *EmptyRequest) (*GetDriveTrayStatusResponse, error)
		SimulateDriveTrayChanges(ctx context.Context, in *EmptyRequest) (*SimulateDriveTrayChangesResponse, error)
		SetTime(ctx context.Context, in *SetTimeRequest) (*SetTimeResponse, error)
		SystemReboot(ctx context.Context, in *EmptyRequest) (*SystemRebootResponse, error)
		SystemPoweroff(ctx context.Context, in *EmptyRequest) (*SystemPoweroffResponse, error)
		SystemInfo(ctx context.Context, in *EmptyRequest) (*SystemInfoResponse, error)
		// ################################################################################
		RemoveObject(ctx context.Context, in *RemoveObjectRequest) (*RemoveObjectResponse, error)
		RenameObject(ctx context.Context, in *RenameObjectRequest) (*RenameObjectResponse, error)
		RemoveBucket(ctx context.Context, in *RemoveBucketRequest) (*RemoveBucketResponse, error)
		ObjectExists(ctx context.Context, in *ObjectExistsRequest) (*ObjectExistsResponse, error)
		StatObject(ctx context.Context, in *StatObjectRequest) (*StatObjectResponse, error)
		ListObjects(ctx context.Context, in *ListObjectsRequest) (*ListObjectsResponse, error)
		ListObjectBlock(ctx context.Context, in *ListObjectBlockRequest) (*ListObjectBlockResponse, error)
		MakeBucket(ctx context.Context, in *MakeBucketRequest) (*MakeBucketResponse, error)
		GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest) (*GetBlockInfoResponse, error)
		VerifyObject(ctx context.Context, in *VerifyObjectRequest) (*VerifyObjectResponse, error)
		VerifyObjectStatus(ctx context.Context, in *VerifyObjectStatusRequest) (*VerifyObjectStatusResponse, error)
		// ################################################################################
		PutObject(ctx context.Context) (odrive.Odrive_PutObjectClient, error)
		GetObject(ctx context.Context, in *GetObjectRequest) (odrive.Odrive_GetObjectClient, error)
	}

	defaultOdrive struct {
		cli zrpc.Client
	}
)

func NewOdrive(cli zrpc.Client) Odrive {
	return &defaultOdrive{
		cli: cli,
	}
}

func (m *defaultOdrive) Stop(ctx context.Context, in *EmptyRequest) (*StopResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.Stop(ctx, in)
}

func (m *defaultOdrive) GetDiscInfo(ctx context.Context, in *EmptyRequest) (*DiscInfoResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetDiscInfo(ctx, in)
}

func (m *defaultOdrive) CompleteDisc(ctx context.Context, in *EmptyRequest) (*CompleteDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.CompleteDisc(ctx, in)
}

func (m *defaultOdrive) FormatDisc(ctx context.Context, in *EmptyRequest) (*FormatDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.FormatDisc(ctx, in)
}

func (m *defaultOdrive) SetBurnSpeedConf(ctx context.Context, in *SetSpeedConfRequest) (*SetSpeedConfResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SetBurnSpeedConf(ctx, in)
}

func (m *defaultOdrive) GetBurnSpeedConf(ctx context.Context, in *GetSpeedConfRequest) (*GetSpeedConfResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetBurnSpeedConf(ctx, in)
}

func (m *defaultOdrive) SetBurnConfig(ctx context.Context, in *SetBurnConfigRequest) (*SetBurnConfigResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SetBurnConfig(ctx, in)
}

func (m *defaultOdrive) GetBurnConfig(ctx context.Context, in *EmptyRequest) (*GetBurnConfigResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetBurnConfig(ctx, in)
}

func (m *defaultOdrive) SetBurnMode(ctx context.Context, in *SetBurnModeResquest) (*SetBurnModeResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SetBurnMode(ctx, in)
}

func (m *defaultOdrive) GetBurnMode(ctx context.Context, in *EmptyRequest) (*GetBurnModeResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetBurnMode(ctx, in)
}

func (m *defaultOdrive) InitDisc(ctx context.Context, in *EmptyRequest) (*InitDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.InitDisc(ctx, in)
}

func (m *defaultOdrive) LoadDisc(ctx context.Context, in *LoadDiscRequest) (*LoadDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.LoadDisc(ctx, in)
}

func (m *defaultOdrive) UnLoadDisc(ctx context.Context, in *EmptyRequest) (*UnLoadDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.UnLoadDisc(ctx, in)
}

func (m *defaultOdrive) UnLoadUdfDisc(ctx context.Context, in *EmptyRequest) (*UnLoadUdfDiscResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.UnLoadUdfDisc(ctx, in)
}

func (m *defaultOdrive) GetDiscMountPoint(ctx context.Context, in *EmptyRequest) (*GetDiscMountPointResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetDiscMountPoint(ctx, in)
}

func (m *defaultOdrive) RecoverDiscDb(ctx context.Context, in *EmptyRequest) (*RecoverDiscDbResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.RecoverDiscDb(ctx, in)
}

func (m *defaultOdrive) FixDiscStatus(ctx context.Context, in *EmptyRequest) (*FixDiscStatusResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.FixDiscStatus(ctx, in)
}

// ################################################################################
func (m *defaultOdrive) GetCacheInfo(ctx context.Context, in *EmptyRequest) (*GetCacheInfoResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetCacheInfo(ctx, in)
}

func (m *defaultOdrive) Reset(ctx context.Context, in *EmptyRequest) (*ResetResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.Reset(ctx, in)
}

func (m *defaultOdrive) DriveInit(ctx context.Context, in *EmptyRequest) (*DriveInitResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.DriveInit(ctx, in)
}

func (m *defaultOdrive) GetDriveInfo(ctx context.Context, in *EmptyRequest) (*DriveInfoResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetDriveInfo(ctx, in)
}

func (m *defaultOdrive) TestUnityReady(ctx context.Context, in *EmptyRequest) (*TestUnityReadyResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.TestUnityReady(ctx, in)
}

func (m *defaultOdrive) DriveReboot(ctx context.Context, in *EmptyRequest) (*DriveRebootResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.DriveReboot(ctx, in)
}

func (m *defaultOdrive) DrivePowerOn(ctx context.Context, in *EmptyRequest) (*DrivePowerOnResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.DrivePowerOn(ctx, in)
}

func (m *defaultOdrive) DrivePowerOff(ctx context.Context, in *EmptyRequest) (*DrivePowerOffResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.DrivePowerOff(ctx, in)
}

func (m *defaultOdrive) GetDrivePowerStatus(ctx context.Context, in *EmptyRequest) (*GetDrivePowerStatusResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetDrivePowerStatus(ctx, in)
}

func (m *defaultOdrive) OpenDriveTray(ctx context.Context, in *OpenDriveTrayRequest) (*OpenDriveTrayResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.OpenDriveTray(ctx, in)
}

func (m *defaultOdrive) CloseDriveTray(ctx context.Context, in *EmptyRequest) (*CloseDriveTrayResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.CloseDriveTray(ctx, in)
}

func (m *defaultOdrive) GetDriveTrayStatus(ctx context.Context, in *EmptyRequest) (*GetDriveTrayStatusResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetDriveTrayStatus(ctx, in)
}

func (m *defaultOdrive) SimulateDriveTrayChanges(ctx context.Context, in *EmptyRequest) (*SimulateDriveTrayChangesResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SimulateDriveTrayChanges(ctx, in)
}

func (m *defaultOdrive) SetTime(ctx context.Context, in *SetTimeRequest) (*SetTimeResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SetTime(ctx, in)
}

func (m *defaultOdrive) SystemReboot(ctx context.Context, in *EmptyRequest) (*SystemRebootResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SystemReboot(ctx, in)
}

func (m *defaultOdrive) SystemPoweroff(ctx context.Context, in *EmptyRequest) (*SystemPoweroffResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SystemPoweroff(ctx, in)
}

func (m *defaultOdrive) SystemInfo(ctx context.Context, in *EmptyRequest) (*SystemInfoResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.SystemInfo(ctx, in)
}

// ################################################################################
func (m *defaultOdrive) RemoveObject(ctx context.Context, in *RemoveObjectRequest) (*RemoveObjectResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.RemoveObject(ctx, in)
}

func (m *defaultOdrive) RenameObject(ctx context.Context, in *RenameObjectRequest) (*RenameObjectResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.RenameObject(ctx, in)
}

func (m *defaultOdrive) RemoveBucket(ctx context.Context, in *RemoveBucketRequest) (*RemoveBucketResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.RemoveBucket(ctx, in)
}

func (m *defaultOdrive) ObjectExists(ctx context.Context, in *ObjectExistsRequest) (*ObjectExistsResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.ObjectExists(ctx, in)
}

func (m *defaultOdrive) StatObject(ctx context.Context, in *StatObjectRequest) (*StatObjectResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.StatObject(ctx, in)
}

func (m *defaultOdrive) ListObjects(ctx context.Context, in *ListObjectsRequest) (*ListObjectsResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.ListObjects(ctx, in)
}

func (m *defaultOdrive) ListObjectBlock(ctx context.Context, in *ListObjectBlockRequest) (*ListObjectBlockResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.ListObjectBlock(ctx, in)
}

func (m *defaultOdrive) MakeBucket(ctx context.Context, in *MakeBucketRequest) (*MakeBucketResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.MakeBucket(ctx, in)
}

func (m *defaultOdrive) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest) (*GetBlockInfoResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetBlockInfo(ctx, in)
}

func (m *defaultOdrive) VerifyObject(ctx context.Context, in *VerifyObjectRequest) (*VerifyObjectResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.VerifyObject(ctx, in)
}

func (m *defaultOdrive) VerifyObjectStatus(ctx context.Context, in *VerifyObjectStatusRequest) (*VerifyObjectStatusResponse, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.VerifyObjectStatus(ctx, in)
}

// ################################################################################
func (m *defaultOdrive) PutObject(ctx context.Context) (odrive.Odrive_PutObjectClient, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.PutObject(ctx)
}

func (m *defaultOdrive) GetObject(ctx context.Context, in *GetObjectRequest) (odrive.Odrive_GetObjectClient, error) {
	client := odrive.NewOdriveClient(m.cli.Conn())
	return client.GetObject(ctx, in)
}
